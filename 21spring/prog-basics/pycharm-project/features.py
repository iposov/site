# 1. Рефакторинги

# Это изменение кода, которое не меняет его смысл.
# простейший пример - переименовывание переменной или чего-то другого
import math

x = 1
print(x)


def fun():
    y = 42  # это другая переменная y, она внутри функции
    print(y)


fun()

# Shift + F6 переименовать

## Выделение переменной

a = 1
b = 2
c = 3

# x1 = (-b + math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)
# x2 = (-b - math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)
# хочется выделить дискриминант  (Extract variable)

# D = b ** 2 - 4 * a * c
# y1 = (-b + math.sqrt(D)) / (2 * a)
# y2 = (-b - math.sqrt(D)) / (2 * a)
# обратное действие, убрать переменную, заменив ее на значение
# Inline

# Автодополнение. Подсказки, что писать дальше
# Список вариантов появляется сам. Чтобы вызвать явно: Ctrl + Space
# можно начать набирать название, список отфильтруется.
# Кнопки вверх/вниз позволяют выбрать вариант. Enter или Tab
# вставляют в код выбранный вариант.
# math.sin

# live templates живые шаблоны
# iter [Tab]
a = [10, 20, 30]
for x in a:
    print(x)

# main [Tab] - пишет код про проверку, как запущен модуль
if __name__ == '__main__':
    print("hello")


# волшебные автодополнения
# def f():
#     a = 10
#     return a
#     a.if
# return a

# другие возможности: см. Help -> Productivity guide

# Отладка
# ставим точки остановки слева от кода.
def fun(a):
    if a[0] > 10:
        print(">10")
    else:
        print("<=10")
    y = 0
    for x in a:
        print(x, x + 1)
        y = y + 1
    print(y)


fun([10, 20, 30])
fun([100, 500])
