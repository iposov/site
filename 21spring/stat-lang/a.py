print("hello a.py")

var_from_a_py = 43


def fun_from_a_py():
    print("hello from a.py")

"""
Проект на python = код + библиотеки фиксированных версий

Проблема, если в системе есть только один набор установленных библиотек, они будут
мешать друг другу.

Окружение в python = интерпретатор python (какой-то версии)
 + библиотеки.
 
Каждый проект в python работает в своем окружении.
Создать окружение = указать версию python и установить в него библиотеки.
Обычный python имеет инструмент virtualenv (виртуальные окружения)
Anaconda тоже имеет свои окружения, управляются они командой conda. Мы напрямую
не будем запускать, будем пользоваться UI 

Архитектура jupyer (раньше называлось IPython)

Jupyter сервер, запускает ядра, которые выполняет вычисления.
Ядра бывают для Python, а еще бывают для кучи других языков.
Сервер надо запускать, на нем запускаются ядра, которые
иногда надо останавливать или перезапускать.

Ситуации: код завис, или надо заново импортировать модуль  

"""
