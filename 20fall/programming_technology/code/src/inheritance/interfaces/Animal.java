package inheritance.interfaces;

//интерфейс описывается как класс, но ключевое слово interface
//в отличие от класса интерфейс описывает **что** может
//делать объект, а не **как** он это делает.
//
//В классе есть методы, у них есть тело. Т.е. в классе
//описано, какие действия и как делают объекты.
//В интерфейсе можно описать только заголовки методов, т.е.
//можно описать, что объект умеет, но нельзя описать, как
//он это делает — у методов нет тел.
//Соответственно, в интерфейсе нет полей, т.е. нельзя
//сохранить данные
public interface Animal {

    //животное умеет издавать звук
    String sound(); //public подразумевается

    //животное имеет имя. Делаем метод, т.к. поля
    //вводить нельзя
    String getName();
}

// можно только заголовки методов ввести, и всё

/*
Интерфейсы не содержат поведения, т.е. в них не пишется
код, как объект выполняет действия. Это нужно ради того,
чтобы можно было наследоваться от нескольких объектов.

Объект колодец.
Well extends Building - он здание
Well extends WaterContainer - контейнер с водой

проблемы
1) конструкторы. Создание колодца - сначала надо создать
базовые классы, т.е. здание и контейнер. Но кого создать первым?
Более того, что если Building extends GameObject и
WaterContainer extends GameObject? Значит надо вызвать
еще и конструктор GameObject, причем всего один раз.

2) методы. Допустим GameObject имеет метод drawOnAScreen(),
Building переопределяет это действие одним образом, а
WaterContainer переопределяет другим. И допустим, в Well
мы не переопределили этот метод. Как рисовать колодец?

В C++ множественное наследование возможно, но программисты учат
все правила, как именно они происходят. В Java запрещено наследоваться
от нескольких классов.
А вот реализовать несколько интерфейсов можно, это потому
что в интерфейсах нет конструкторов, и методы не имеют тел,
поэтому нет проблемы, из какого базового класса брать реализацию
метода.
 */
